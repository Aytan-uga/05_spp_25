---
title: "Assignment 6 - Split-plot randomization"
author: "Aytan Pirverdiyeva"  
format:
  html:
    code-fold: true 
    embed-resources: true
    toc: true
    number-sections: true
    theme: cerulean
---

# Introduction  
This assignment will ask you to conduct a split-plot RCBD randomization. 

For that, you will first need to watch (and code along with) the following split-plot randomization video:

- split-plot randomization: https://youtu.be/rXTp3Vw_770?si=MajBK1aZ221orfpa&t=3401 (starts at 00:56:41, watch till end, about 50-min total)

- The partial script for the video above is in our GitHub repository, 04-classcode, **02-13_spp_randomization_partial.qmd**.


**AFTER watching the video and developing the code in class**, then start working on this HW assignment.  

The different sections representing what we did in class were left in the script to provide you a scaffold to start from.  

# Instructions  
  - Move this script into the `code` subfolder of your `05_spp` project folder  
  - On this script, fill your name under the `title` section of the YAML  
  
# Goal of this assignment  
The goal is this assignment is for you to **design a split-plot RCBD design applicable to your area of study**.  

This could be from your own experience, an example from the literature, or something you come up entirely on your own (as long as it makes sense).  

In the headings below, you will answer a couple of questions related to study objectives and treatment design, and then move on to randomize your study, create a plot layout, and export the designed table to file.  

# Setup  
Here is where we load the packages we will use.  
Make sure to load each package in the chunk below.  
```{r setup, warning=FALSE, message=FALSE}
library(tidyverse)
library(dplyr)
```

# Treatment design
## Objectives  
Keeping with the same motivational example we've been using, our treatment design is:  

-   2-way factorial **in a split-plot**  
-   **Whole-plot** treatment factor: P fertilizer rates: 0, 40, 80 kg K/ha\
-   **Split-plot** treatment factor: N fertilizer rates: 0, 100, 200 kg N/ha\
-   3 x 3 = **9 treatment combinations** that will be assigned to different sizes of experimental units!  

# Split-plot in RCBD  
## WP randomization
# Set seed for reproducibility
```{r}
set.seed(930)

```
## Treatment design explanation  
Here is where you explain your treatment design, including the name of the treatment factors, their levels (don't forget to include units), and which is the whole-plot treatment factor and which one is the split-plot treatment factor. 
#Explanation of my treatment design
- First objective: To determine the effect of varying Phosphorus (P) fertilizer rates on crop yield and root development. The study will assess how different levels of phosphorus application influence the physiological growth parameters and overall productivity of the crop.
- Second objective: To evaluate the interaction between Phosphorus (P) rates and other nutrient factors in subsequent phases of the experiment.

## Code  
Here develop the code to setup your design (like in class).   
```{r}
wp_rcbd_rand <-crossing(prate_kgha = c(0, 40, 80),
                        block = 1:3
                        ) %>%
arrange(block)%>%
  
  # Randomizing WP treatment factor to blocks (restricted) 
group_by(block)%>%
  mutate(prate_kgha = sample(prate_kgha))%>%
    # Creating WP plot numbers 
mutate(wplot = (block*100)+1:3)%>%
  ungroup()

wp_rcbd_rand
```

## SP randomization  
```{r}
library(dplyr)

# Assuming wp_rcbd_rand exists and has been created correctly
# Here is the corrected script for randomizing N rates within each W plot

sp_rcbd_rand <- crossing(nrate_kgha = c(0, 100, 200),
                         wplot = wp_rcbd_rand$wplot
                        ) %>%
  arrange(wplot) %>%
  group_by(wplot) %>%
  mutate(nrate_kgha = sample(nrate_kgha)) %>%
  # Creating SP plot numbers after ensuring all manipulations are completed within the group
  mutate(splot = paste0(wplot, "-", row_number())) %>%
  ungroup()  # Ungroup to finalize the data manipulation

# View the resulting dataframe
print(sp_rcbd_rand)
```
 
## Joining WP and SP into one object
```{r}
# Ensure wp_rcbd_rand is the data frame containing the whole plot info with 'wplot' and other identifiers
spp_rcbd_rand <- wp_rcbd_rand %>%
  right_join(sp_rcbd_rand, by = c("wplot"))%>%
  # Joining on 'wplot' if this is the common identifier
  mutate(trtname = paste0(prate_kgha, "+", nrate_kgha))

# Print the combined data frame to check the join
print(spp_rcbd_rand)


```
```{r}
spp_rcbd_rand%>%
  filter(block == 1)

```

## Plot layout
```{r}
spp_rcbd_layout <- spp_rcbd_rand %>%
  # Defining number of rows and columns in the field for plotting purposes
  mutate(row = rep(1:3, each = 9)) %>%
  mutate(col = rep(seq(from = 1, 
                       to = 9, #total number of treatments, 
                       by = 1), 
                   times = 3 #total number of blocks
  )) %>%
  # Creating plot and trtname labels for plotting
  mutate(lab = paste0(splot, "\n", trtname))

spp_rcbd_layout
```

# Exporting to file
```{r}
ggplot(data = spp_rcbd_layout, aes(x = row, 
                                   y = -col))+
  geom_tile(aes(fill = factor(nrate_kgha)),
            color= "black",
            show.legend = F
            )+
  geom_tile(aes(color = prate_kgha),
            show.legend = F,
            size = 2,
            linetype = 2,
            fill = NA)+

  
  scale_fill_manual(values = c("#e5f0db",
                              "#b1d095",
                              "#5e813f"))+

  geom_text(aes(label = splot), fontface = "bold", vjust = -.8)+
  geom_text(aes(label = trtname), vjust = 1)+
  labs(title = "Split-plot RCBD randomization of a\n3 P (whole-plot) x 3 N (split-plot) treatment design") +
  theme_void()
```
```{r}
spp_rcbd_rand %>%
  # Rearranging columns  
  dplyr::select(block, wplot, prate_kgha, 
                splot, nrate_kgha,
                trtname) %>%
  write_csv("../output/spp_rcbd_randomization_table.csv")
```



```{r}
ggsave("../output/spp_rcbd_layoutmap.png",
       width = 6,
       height = 5,
       bg = "white")
```

# Submitting your work  
Once you have developed all the code and answers, make sure to Render this quarto file.  

**Notes on rendering**:  

- Make sure to render your work and inspect how the final html look like.  
- If it does not look professional for whatever reason, then fix the issue, re-render it, recheck.  
- Only send me your work once your html file looks professional.  
  - **DO NOT** delete the file's heading levels (# and ##). They set up the proper heading 1 and 2 levels, and I use them to guide my grading.  
  - If a given chunk is also outputting warnings or messages, inhibit this behavior by changing the chunk options `message` and `warning` to `FALSE` (I'll demo this in a moment).  
  
  - If, after rendered, 2 lines of text are connected and you wish to "break line" between them, add 2 extra spaces after the first one (I'lld demo this in a moment).  

After rendering, an .html file will be created on your `code` folder.  

Rename this file to `Assignment-06-spp-LASTNAME.html`.    

For ex., mine would be `Assignment-06-spp-Bastos.html`.

Submit your work by uploading the **html** file to **eLC Assigment #6 - Split-plot randomization** by Feb 20 11:59 pm.  
  




